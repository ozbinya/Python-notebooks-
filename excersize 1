{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ozbinya/Python-notebooks-/blob/main/excersize%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0c4f9a44",
      "metadata": {
        "id": "0c4f9a44"
      },
      "source": [
        "# üß† Predicting Customer Churn Using Random Forests\n",
        "Welcome to this practical machine learning exercise. In this notebook, you'll develop a solution for predicting customer churn ‚Äî a classic and highly practical problem in economics, management, and business analytics.\n",
        "\n",
        "**Goal:** Apply machine learning to identify customers at risk of leaving (churning), using historical data.\n",
        "\n",
        "Along the way, you'll:\n",
        "- Preprocess data responsibly (avoiding leakage)\n",
        "- Train and evaluate models\n",
        "- Build pipelines for cleaner workflows\n",
        "- Tune models using validation sets\n",
        "- Deploy a final product-ready solution\n",
        "\n",
        "This notebook emphasizes **intuitive understanding**, **real-world practices**, and links to **further resources**."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9f6efa9c-5882-4b42-b50f-a4ab2d49462b",
      "metadata": {
        "id": "9f6efa9c-5882-4b42-b50f-a4ab2d49462b"
      },
      "source": [
        "**Note:** Documentation links are provided extensively, to help you, in the following format:\n",
        "  - [üìò StandardScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "88a09d78-c36f-4a6b-bace-983e2e2108d8",
      "metadata": {
        "id": "88a09d78-c36f-4a6b-bace-983e2e2108d8"
      },
      "source": [
        "**Note: Whenever you see the ‚úçÔ∏è symbol, it means you must fill in the blanks with your own code!**"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fba58bf0-b2e4-4a38-9be0-d3614c4ef242",
      "metadata": {
        "id": "fba58bf0-b2e4-4a38-9be0-d3614c4ef242"
      },
      "source": [
        "## ‚öôÔ∏è Step 0: Setup\n",
        "\n",
        "Before we begin, we load the core Python libraries used for:\n",
        "- **Data manipulation** (`pandas`, `numpy`)\n",
        "- **Visualization** (`matplotlib`, `seaborn`)\n",
        "- **Modeling and preprocessing** (`sklearn`)\n",
        "\n",
        "We'll also be using the **scikit-learn** machine learning library throughout this notebook ‚Äî make sure to check the documentation links provided at each step."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "id": "4bb394df",
      "metadata": {
        "id": "4bb394df"
      },
      "outputs": [],
      "source": [
        "# Common libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Preprocessing and modeling tools\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, ConfusionMatrixDisplay"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9b7451e1-3a54-4e3f-8bc7-d416d529a1ba",
      "metadata": {
        "id": "9b7451e1-3a54-4e3f-8bc7-d416d529a1ba"
      },
      "source": [
        "## üìä Step 1: Load the Data\n",
        "\n",
        "The dataset contains customer data from a (fictional) telecom company. Each row is a customer, and each column is an attribute describing that customer‚Äôs usage patterns or account features.\n",
        "\n",
        "You are given a **train set** and a **test set** (pre-split). This setup simulates a situation where you're developing a model using historical data and then testing how well it might generalize to new customers."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "id": "6d6f94d6",
      "metadata": {
        "id": "6d6f94d6"
      },
      "outputs": [],
      "source": [
        "# Load data\n",
        "# ‚úçÔ∏è Load the the training set into df_train and the test set into df_test.\n",
        "df_train = pd.read_csv(\"churn_train.csv\")\n",
        "df_test = pd.read_csv(\"churn_test.csv\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b179da29",
      "metadata": {
        "id": "b179da29"
      },
      "source": [
        "## üéØ Step 2: Understand the Problem ‚Äî Classification\n",
        "This is a **binary classification problem**: each customer either **churns** (`Churn = Yes`) or **stays** (`Churn = No`).\n",
        "\n",
        "**Class imbalance:** Only ~14% of customers are churners. This will affect how we train and evaluate the model.\n",
        "\n",
        "üìå We'll address this through evaluation metrics like precision and recall."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "id": "5afafe94",
      "metadata": {
        "id": "5afafe94"
      },
      "outputs": [],
      "source": [
        "# Separate features and target\n",
        "# ‚úçÔ∏è Split df_train into X_train and y_train; do the same for df_test.\n",
        "\n",
        "X_train = df_train.drop(\"Churn\", axis=1)\n",
        "y_train = df_train[\"Churn\"]\n",
        "X_test = df_test.drop(\"Churn\", axis=1)\n",
        "y_test = df_test[\"Churn\"]"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "96c87e08-9b46-489e-a602-6c041dcfa375",
      "metadata": {
        "id": "96c87e08-9b46-489e-a602-6c041dcfa375"
      },
      "source": [
        "## üßπ Step 3: Preprocessing ‚Äî Manual (Leakage-Free)\n",
        "\n",
        "Preprocessing is where most real-world ML effort goes. We must:\n",
        "1. Encode **categorical** features numerically (for the model).\n",
        "2. Scale **numerical** features to help model convergence.\n",
        "3. Avoid **data leakage**: Never use information from the test set to preprocess the training set!\n",
        "\n",
        "üìå We'll handle categorical and numeric features **separately** and then combine them."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "id": "4d5337f3",
      "metadata": {
        "id": "4d5337f3"
      },
      "outputs": [],
      "source": [
        "# Identify feature types\n",
        "# ‚úçÔ∏è Create a list variable named categorical_features, containing the names of all categorical feature columns.\n",
        "categorical_features = X_train.select_dtypes(include=[\"object\"]).columns.tolist()\n",
        "# ‚úçÔ∏è Create a list variable named numeric_features, containing the names of all numeric feature columns.\n",
        "numeric_features = X_train.select_dtypes(include=[\"number\"]).columns.tolist()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "id": "9987f776",
      "metadata": {
        "id": "9987f776"
      },
      "outputs": [],
      "source": [
        "# Manual preprocessing\n",
        "# ‚úçÔ∏è Fit a OneHotEncoder to the training set, but apply it to both the training and test set!\n",
        "# üí° Hint: Recall the difference between the `fit`, `transform` and `fit_transform` methods.\n",
        "# ‚ùó Important! Use `sparse=False` or `sparse_output=False` (depending on the version of sklearn you're using)\n",
        "# when initializing your OneHotEncoder! It will be important later!\n",
        "encoder = OneHotEncoder(sparse_output=False)\n",
        "X_train_cat = encoder.fit_transform(X_train[categorical_features])\n",
        "X_test_cat = encoder.transform(X_test[categorical_features])\n",
        "\n",
        "\n",
        "# ‚úçÔ∏è Now fit a StandardScaler to the training set, but apply it to both the training and test set!\n",
        "scaler = StandardScaler()\n",
        "X_train_num = scaler.fit_transform(X_train[numeric_features])\n",
        "X_test_num = scaler.transform(X_test[numeric_features])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "id": "c6090c3e",
      "metadata": {
        "id": "c6090c3e"
      },
      "outputs": [],
      "source": [
        "# We now combine the numerical and categorical features:\n",
        "# ‚ÑπÔ∏è This wouldn't have worked without `sparse=False`!\n",
        "X_train_final = np.hstack([X_train_num, X_train_cat])\n",
        "X_test_final = np.hstack([X_test_num, X_test_cat])"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d40a93cd-b574-4fc2-84c4-65f181d24109",
      "metadata": {
        "id": "d40a93cd-b574-4fc2-84c4-65f181d24109"
      },
      "source": [
        "üéì **Why this matters**:\n",
        "\n",
        "- **StandardScaler** rescales features to mean 0 and standard deviation 1, making tree-based models faster and more robust.\n",
        "  - [üìò StandardScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html)\n",
        "\n",
        "- **OneHotEncoder** converts categorical variables into binary vectors.\n",
        "  - [üìò OneHotEncoder](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html)\n",
        "\n",
        "‚úçÔ∏è **Your Turn**: Combine the categorical and numeric processed arrays with `np.hstack(...)` to get `X_train_final` and `X_test_final`."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5b376e2e-6416-4169-97b7-a3357a060f4a",
      "metadata": {
        "id": "5b376e2e-6416-4169-97b7-a3357a060f4a"
      },
      "source": [
        "## üå≤ Step 4: Random Forest Training\n",
        "\n",
        "**Random Forests** are one of the most versatile and powerful classifiers, especially for tabular data.\n",
        "\n",
        "They are:\n",
        "- **Ensemble models** made of many decision trees.\n",
        "- Resistant to overfitting thanks to randomness.\n",
        "- Handle both categorical (after encoding) and numeric features well.\n",
        "\n",
        "[üìò RandomForestClassifier Docs](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "id": "6247024c",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "6247024c",
        "outputId": "8b8a7174-4ab8-4d77-dcc7-6fc23b9a5cc0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"‚ñ∏\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"‚ñæ\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "# Train a Random Forest classifier\n",
        "# ‚úçÔ∏è Create a new RandomForestClassifier and assign it the a variable named `model`.\n",
        "model = RandomForestClassifier()\n",
        "# ‚úçÔ∏è Fit your RandomForestClassifier in the training set.\n",
        "model.fit(X_train_final, y_train)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a802c250-cf8c-405a-a78c-abeaca4e0a54",
      "metadata": {
        "id": "a802c250-cf8c-405a-a78c-abeaca4e0a54"
      },
      "source": [
        "## üìä Step 5: Evaluation on Held-Out Test Set\n",
        "\n",
        "To estimate how well your model might perform in production, use a **test set that the model hasn‚Äôt seen**.\n",
        "\n",
        "Use:\n",
        "- [üìò accuracy_score](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html)\n",
        "- [üìò classification_report](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html)\n",
        "\n",
        "üìå **Reminder**: With class imbalance, accuracy can be misleading. Look at **precision, recall, and F1 score** as well."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "id": "8d74ea87",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8d74ea87",
        "outputId": "b30ef9e5-3654-4812-915a-ea6fc40a9385"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9445277361319341\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "       False       0.94      0.99      0.97       572\n",
            "        True       0.95      0.64      0.77        95\n",
            "\n",
            "    accuracy                           0.94       667\n",
            "   macro avg       0.95      0.82      0.87       667\n",
            "weighted avg       0.94      0.94      0.94       667\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# Evaluate on test set\n",
        "# ‚úçÔ∏è Save the prediction of your model on the test set to `y_pred`.\n",
        "y_pred = model.predict(X_test_final)\n",
        "\n",
        "# ‚úçÔ∏è Print the accuracy score your model got.\n",
        "print(accuracy_score(y_test, y_pred))\n",
        "\n",
        "# ‚úçÔ∏è Print a classification report for your model.\n",
        "print(classification_report(y_test, y_pred))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1aa7813b-5da5-43b2-8e69-aafa9888fd26",
      "metadata": {
        "id": "1aa7813b-5da5-43b2-8e69-aafa9888fd26"
      },
      "source": [
        "## üîÅ Step 6: Use Pipelines\n",
        "\n",
        "Manual preprocessing is error-prone. Use [üìò Pipelines](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html) to:\n",
        "\n",
        "- Bundle preprocessing and modeling together.\n",
        "- Reduce leakage risk.\n",
        "- Improve reproducibility.\n",
        "\n",
        "We'll use [üìò ColumnTransformer](https://scikit-learn.org/stable/modules/generated/sklearn.compose.ColumnTransformer.html) to apply different preprocessing to numeric and categorical features.\n",
        "\n",
        "üìö Read more:\n",
        "- [üìò sklearn Pipelines Tutorial](https://scikit-learn.org/stable/modules/compose.html)\n",
        "- [üìù Blog Post](https://towardsdatascience.com/how-to-use-columntransformer-for-numerical-and-categorical-data-6d8cbd25f4b6)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "id": "9b41ebdd",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9b41ebdd",
        "outputId": "3419b8fc-c650-4552-da4e-c5dad0bf5a7f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "       False       0.94      1.00      0.97       572\n",
            "        True       0.97      0.61      0.75        95\n",
            "\n",
            "    accuracy                           0.94       667\n",
            "   macro avg       0.95      0.80      0.86       667\n",
            "weighted avg       0.94      0.94      0.94       667\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# Use sklearn pipeline\n",
        "# ‚úçÔ∏è Create a ColumnTransformer object, made up of a StandardScaler followed by a OneHotEncoder object.\n",
        "#‚ùó Important! Remember to use `sparse=False` or `sparse_output=False`.\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', StandardScaler(), numeric_features),\n",
        "        ('cat', OneHotEncoder(sparse_output=False), categorical_features)\n",
        "    ])\n",
        "\n",
        "\n",
        "# ‚úçÔ∏è Now create a Pipeline object made up of your column transformer object and a RandomForestClassifier object.\n",
        "\n",
        "pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('classifier', RandomForestClassifier())\n",
        "])\n",
        "\n",
        "# ‚úçÔ∏è Fit your pipeline object on the training set, then predict results for the test set\n",
        "# and produce a classification report.\n",
        "pipeline.fit(X_train, y_train)\n",
        "y_pred = pipeline.predict(X_test)\n",
        "print(classification_report(y_test, y_pred))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2ea32585-1822-4f94-a0fa-16938544de12",
      "metadata": {
        "id": "2ea32585-1822-4f94-a0fa-16938544de12"
      },
      "source": [
        "## üîç Step 7: Manual Hyperparameter Tuning\n",
        "\n",
        "To make better models, tune key hyperparameters. We‚Äôll try different values for `max_depth`.\n",
        "\n",
        "We'll use a **train-validation-test** split:\n",
        "- **Train**: build models\n",
        "- **Validation**: compare models\n",
        "- **Test**: final performance estimate\n",
        "\n",
        "[üìò train_test_split](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "id": "e9426854-68c6-4ce4-958d-1c13d3f0b7aa",
      "metadata": {
        "id": "e9426854-68c6-4ce4-958d-1c13d3f0b7aa"
      },
      "outputs": [],
      "source": [
        "# Let's unite the training and validation sets into one big set:\n",
        "df_full = pd.concat([df_train, df_test], ignore_index=True)\n",
        "X = df_full.drop(\"Churn\", axis=1)\n",
        "y = df_full[\"Churn\"]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "id": "9540e694",
      "metadata": {
        "id": "9540e694"
      },
      "outputs": [],
      "source": [
        "# Train-validation-test split for tuning\n",
        "# We use train_test_split to get a three-way split: Firstg into trainval and test;\n",
        "# then we split trainval into train and validation.\n",
        "X_trainval, X_test_final, y_trainval, y_test_final = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
        "X_train, X_val, y_train, y_val = train_test_split(X_trainval, y_trainval, test_size=0.25, random_state=42, stratify=y_trainval)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "id": "1f8e0efb",
      "metadata": {
        "id": "1f8e0efb"
      },
      "outputs": [],
      "source": [
        "# Manual hyperparameter tuning\n",
        "# ‚úçÔ∏è Manually find the best value for the max_depth hyperparameter out of [5, 10, 15, 20]:\n",
        "\n",
        "max_depths = [5, 10, 15, 20]\n",
        "for max_depth in max_depths:\n",
        "\n",
        "# üí° Hint: Use a for loop to iterate over a list of possible values. Then, for each such value,\n",
        "# create a new pipeline with the appropriate value for RandomForestClassifier (you DON'T have to\n",
        "# create your ColumnTransformer again; use the same object you've already created), fit it on the\n",
        "# training set and evaluate it on the **validation set**! Do NOT touch the test set in this loop!\n",
        "\n",
        "    pipeline = Pipeline(steps=[\n",
        "        ('preprocessor', preprocessor),\n",
        "        ('classifier', RandomForestClassifier(max_depth=max_depth))\n",
        "    ])\n",
        "    pipeline.fit(X_train, y_train)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8a9f43ee-f6b1-42b1-8c3f-cb27ed56ac08",
      "metadata": {
        "id": "8a9f43ee-f6b1-42b1-8c3f-cb27ed56ac08"
      },
      "source": [
        "## ‚úÖ Step 8: Final Evaluation and Deployment-Ready Model\n",
        "\n",
        "After choosing the best hyperparameter from the validation set, retrain your model on **train+val** and evaluate on **test**.\n",
        "\n",
        "Then, retrain a final version on **all labeled data** to use in production.\n",
        "\n",
        "You can save the model for future use using:\n",
        "[üìò sklearn model persistence](https://scikit-learn.org/stable/model_persistence.html)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b8d6c4cf-0a25-4c4b-8b1f-d09422ebfbf4",
      "metadata": {
        "id": "b8d6c4cf-0a25-4c4b-8b1f-d09422ebfbf4"
      },
      "source": [
        "### 8.1: Final Evaluation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "id": "f533c3da",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f533c3da",
        "outputId": "d60ffb26-ca51-4d3d-f5fc-bec4846f507b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9160419790104948\n"
          ]
        }
      ],
      "source": [
        "# Final model evaluation\n",
        "# ‚úçÔ∏è Now create the pipeline again, now with max_depth set to the value which showed the\n",
        "# best results. Then, fit it on the **X_trainval** set, and predict on the test set.\n",
        "\n",
        "\n",
        "pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('classifier', RandomForestClassifier(max_depth=10))\n",
        "])\n",
        "pipeline.fit(X_trainval, y_trainval)\n",
        "# What is the model performance? That's our estimate for future performamce.\n",
        "y_pred = pipeline.predict(X_test_final)\n",
        "print(accuracy_score(y_test_final, y_pred))\n",
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cd229a26-c1c1-44b5-bee1-ca62333a908d",
      "metadata": {
        "id": "cd229a26-c1c1-44b5-bee1-ca62333a908d"
      },
      "source": [
        "### üí¨ Answer the following questions:\n",
        "- Are there more false positives or false negatives?\n",
        "- Which mistake is more costly in your business scenario?\n",
        "- Should you tune the model to favor precision or recall?"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cd23b69b-348f-4edf-ad33-6443003be3a6",
      "metadata": {
        "id": "cd23b69b-348f-4edf-ad33-6443003be3a6"
      },
      "source": [
        "### üß™ Sub-Task: Plot the Confusion Matrix\n",
        "\n",
        "The **confusion matrix** helps you visually assess where your model is getting things right or wrong.\n",
        "\n",
        "It breaks predictions into:\n",
        "- **True Positives (TP)**: correctly predicted churners.\n",
        "- **True Negatives (TN)**: correctly predicted non-churners.\n",
        "- **False Positives (FP)**: predicted churn but customer stayed.\n",
        "- **False Negatives (FN)**: predicted stay but customer churned.\n",
        "\n",
        "This can help you **understand your model's trade-offs**, especially when classifying rare events (like churn).\n",
        "\n",
        "üìò Documentation:\n",
        "- [sklearn.metrics.confusion_matrix](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.confusion_matrix.html)\n",
        "- [sklearn.metrics.ConfusionMatrixDisplay](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.ConfusionMatrixDisplay.html)\n",
        "\n",
        "‚úçÔ∏è **Your task**: Use `ConfusionMatrixDisplay.from_predictions(...)` to plot the matrix."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "id": "b58c1638",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "b58c1638",
        "outputId": "ff95d6c5-b47b-4a19-b3b0-feb13cfd037f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7a360e2bf750>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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5s2bS5JycnJ01113qVatWoqOjtZtt92mL774wn1Pp9OpkSNHqlatWqpTp47GjBmjH76m54ftj6KiIo0dO1bx8fEKCQlRQkKCXnrpJX3xxRfq1q2bJKl27dqy2WwaOHCgJMnlciktLU2NGzdWWFiY2rZtq9dee83jc9555x01a9ZMYWFh6tatm0ec5TV27Fg1a9ZMNWvWVJMmTTRhwgSVlJScN+75559XfHy8atasqbvuukt5eXke51988UW1bNlSoaGhatGihebOnet1LAAqDkkFYFhYWJiKi4vd++vXr1dWVpbWrl2rVatWqaSkRMnJyYqMjNSHH36ozZs3KyIiQj179nRf9/TTT2vhwoX6+9//rvT0dJ08eVJvvPHGj37ugAED9I9//EOzZs3S3r179fzzzysiIkLx8fF6/fXXJUlZWVk6duyYnnvuOUlSWlqaFi9erPnz52v37t0aMWKE7r77bm3atEnSueSnb9++6tOnj3bs2KH7779f48aN8/q/SWRkpBYuXKg9e/boueee0wsvvKCZM2d6jDlw4ICWL1+ulStXas2aNfrkk0/00EMPuc8vWbJEEydO1OOPP669e/dq+vTpmjBhAq8CBy4nFoBLlpqaat12222WZVmWy+Wy1q5da4WEhFijRo1yn4+JibGKiorc17z88stW8+bNLZfL5T5WVFRkhYWFWe+9955lWZZ19dVXWzNmzHCfLykpsRo0aOD+LMuyrC5duliPPPKIZVmWlZWVZUmy1q5de8E4//Wvf1mSrO+++859rLCw0KpZs6a1ZcsWj7GDBg2y+vfvb1mWZY0fP95KTEz0OD927Njz7vVDkqw33njjoueffPJJKykpyb0/adIkKzAw0Dpy5Ij72LvvvmsFBARYx44dsyzLsq699lpr6dKlHveZNm2a5XA4LMuyrMOHD1uSrE8++eSinwugYjGnAvDRqlWrFBERoZKSErlcLv3+97/X5MmT3edbt27tMY9i586dOnDggCIjIz3uU1hYqIMHDyovL0/Hjh1Tx44d3edq1KihDh06nNcCKbNjxw4FBgaqS5cu5Y77wIEDOnv2rG699VaP48XFxbr++uslSXv37vWIQ5IcDke5P6PMsmXLNGvWLB08eFAFBQUqLS2V3W73GNOwYUPVr1/f43NcLpeysrIUGRmpgwcPatCgQXrggQfcY0pLSxUVFeV1PAAqBkkF4KNu3bpp3rx5Cg4OVlxcnGrU8PzfKjw83GO/oKBASUlJWrJkyXn3qlu37iXFEBYW5vU1BQUFkqTVq1d7/DKXzs0TMSUjI0MpKSmaMmWKkpOTFRUVpVdffVVPP/2017G+8MIL5yU5gYGBxmIF4BuSCsBH4eHhSkhIKPf49u3ba9myZapXr955/1ovc/XVV+vjjz/WTTfdJOncv8gzMzPVvn37C45v3bq1XC6XNm3apO7du593vqxS4nQ63ccSExMVEhKi7Ozsi1Y4WrZs6Z50Wuajjz766S/5P7Zs2aJGjRrpz3/+s/vYl19+ed647OxsHT16VHFxce7PCQgIUPPmzRUTE6O4uDgdOnRIKSkpXn0+gMrDRE2gkqWkpOiqq67Sbbfdpg8//FCHDx/Wxo0b9fDDD+vIkSOSpEceeURPPPGE3nzzTe3bt08PPfTQj64xcc011yg1NVX33Xef3nzzTfc9ly9fLklq1KiRbDabVq1apa+//loFBQWKjIzUqFGjNGLECC1atEgHDx7U9u3bNXv2bPfkxwcffFD79+/X6NGjlZWVpaVLl2rhwoVefd+mTZsqOztbr776qg4ePKhZs2ZdcNJpaGioUlNTtXPnTn344Yd6+OGHdddddyk2NlaSNGXKFKWlpWnWrFn6/PPPtWvXLi1YsEDPPPOMV/EAqDgkFUAlq1mzpj744AM1bNhQffv2VcuWLTVo0CAVFha6Kxd/+tOfdM899yg1NVUOh0ORkZG64447fvS+8+bN05133qmHHnpILVq00AMPPKAzZ85IkurXr68pU6Zo3LhxiomJ0dChQyVJ06ZN04QJE5SWlqaWLVuqZ8+eWr16tRo3bizp3DyH119/XW+++abatm2r+fPna/r06V5931//+tcaMWKEhg4dqnbt2mnLli2aMGHCeeMSEhLUt29f/fKXv1SPHj3Upk0bj0dG77//fr344otasGCBWrdurS5dumjhwoXuWAFUPZt1sZlfAAAAXqBSAQAAjCCpAAAARpBUAAAAI0gqAACAESQVAADACJIKAABgBEkFAAAwgqQCAAAYQVIBAACMIKkAAABGkFQAAAAj/h9qD4SHyadspAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Plot confusion matrix\n",
        "# ‚úçÔ∏è Use ConfusionMatrixDisplay.from_predictions().\n",
        "ConfusionMatrixDisplay.from_predictions(y_test_final, y_pred)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0d4bb79c-4c92-484f-b69f-1e8691bb4671",
      "metadata": {
        "id": "0d4bb79c-4c92-484f-b69f-1e8691bb4671"
      },
      "source": [
        "### 8.2: Train the final model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "id": "20b38234",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 292
        },
        "id": "20b38234",
        "outputId": "238a6c2f-200f-4db4-aece-c6446eb1293b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('preprocessor',\n",
              "                 ColumnTransformer(transformers=[('num', StandardScaler(),\n",
              "                                                  ['Account length',\n",
              "                                                   'Area code',\n",
              "                                                   'Number vmail messages',\n",
              "                                                   'Total day minutes',\n",
              "                                                   'Total day calls',\n",
              "                                                   'Total day charge',\n",
              "                                                   'Total eve minutes',\n",
              "                                                   'Total eve calls',\n",
              "                                                   'Total eve charge',\n",
              "                                                   'Total night minutes',\n",
              "                                                   'Total night calls',\n",
              "                                                   'Total night charge',\n",
              "                                                   'Total intl minutes',\n",
              "                                                   'Total intl calls',\n",
              "                                                   'Total intl charge',\n",
              "                                                   'Customer service calls']),\n",
              "                                                 ('cat',\n",
              "                                                  OneHotEncoder(sparse_output=False),\n",
              "                                                  ['State',\n",
              "                                                   'International plan',\n",
              "                                                   'Voice mail plan'])])),\n",
              "                ('classifier', RandomForestClassifier(max_depth=10))])"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-3 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-3 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"‚ñ∏\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"‚ñæ\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-3 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-3 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-3 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n",
              "                                                  [&#x27;Account length&#x27;,\n",
              "                                                   &#x27;Area code&#x27;,\n",
              "                                                   &#x27;Number vmail messages&#x27;,\n",
              "                                                   &#x27;Total day minutes&#x27;,\n",
              "                                                   &#x27;Total day calls&#x27;,\n",
              "                                                   &#x27;Total day charge&#x27;,\n",
              "                                                   &#x27;Total eve minutes&#x27;,\n",
              "                                                   &#x27;Total eve calls&#x27;,\n",
              "                                                   &#x27;Total eve charge&#x27;,\n",
              "                                                   &#x27;Total night minutes&#x27;,\n",
              "                                                   &#x27;Total night calls&#x27;,\n",
              "                                                   &#x27;Total night charge&#x27;,\n",
              "                                                   &#x27;Total intl minutes&#x27;,\n",
              "                                                   &#x27;Total intl calls&#x27;,\n",
              "                                                   &#x27;Total intl charge&#x27;,\n",
              "                                                   &#x27;Customer service calls&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  OneHotEncoder(sparse_output=False),\n",
              "                                                  [&#x27;State&#x27;,\n",
              "                                                   &#x27;International plan&#x27;,\n",
              "                                                   &#x27;Voice mail plan&#x27;])])),\n",
              "                (&#x27;classifier&#x27;, RandomForestClassifier(max_depth=10))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>Pipeline</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;preprocessor&#x27;,\n",
              "                 ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n",
              "                                                  [&#x27;Account length&#x27;,\n",
              "                                                   &#x27;Area code&#x27;,\n",
              "                                                   &#x27;Number vmail messages&#x27;,\n",
              "                                                   &#x27;Total day minutes&#x27;,\n",
              "                                                   &#x27;Total day calls&#x27;,\n",
              "                                                   &#x27;Total day charge&#x27;,\n",
              "                                                   &#x27;Total eve minutes&#x27;,\n",
              "                                                   &#x27;Total eve calls&#x27;,\n",
              "                                                   &#x27;Total eve charge&#x27;,\n",
              "                                                   &#x27;Total night minutes&#x27;,\n",
              "                                                   &#x27;Total night calls&#x27;,\n",
              "                                                   &#x27;Total night charge&#x27;,\n",
              "                                                   &#x27;Total intl minutes&#x27;,\n",
              "                                                   &#x27;Total intl calls&#x27;,\n",
              "                                                   &#x27;Total intl charge&#x27;,\n",
              "                                                   &#x27;Customer service calls&#x27;]),\n",
              "                                                 (&#x27;cat&#x27;,\n",
              "                                                  OneHotEncoder(sparse_output=False),\n",
              "                                                  [&#x27;State&#x27;,\n",
              "                                                   &#x27;International plan&#x27;,\n",
              "                                                   &#x27;Voice mail plan&#x27;])])),\n",
              "                (&#x27;classifier&#x27;, RandomForestClassifier(max_depth=10))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>preprocessor: ColumnTransformer</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.compose.ColumnTransformer.html\">?<span>Documentation for preprocessor: ColumnTransformer</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>ColumnTransformer(transformers=[(&#x27;num&#x27;, StandardScaler(),\n",
              "                                 [&#x27;Account length&#x27;, &#x27;Area code&#x27;,\n",
              "                                  &#x27;Number vmail messages&#x27;, &#x27;Total day minutes&#x27;,\n",
              "                                  &#x27;Total day calls&#x27;, &#x27;Total day charge&#x27;,\n",
              "                                  &#x27;Total eve minutes&#x27;, &#x27;Total eve calls&#x27;,\n",
              "                                  &#x27;Total eve charge&#x27;, &#x27;Total night minutes&#x27;,\n",
              "                                  &#x27;Total night calls&#x27;, &#x27;Total night charge&#x27;,\n",
              "                                  &#x27;Total intl minutes&#x27;, &#x27;Total intl calls&#x27;,\n",
              "                                  &#x27;Total intl charge&#x27;,\n",
              "                                  &#x27;Customer service calls&#x27;]),\n",
              "                                (&#x27;cat&#x27;, OneHotEncoder(sparse_output=False),\n",
              "                                 [&#x27;State&#x27;, &#x27;International plan&#x27;,\n",
              "                                  &#x27;Voice mail plan&#x27;])])</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>num</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;Account length&#x27;, &#x27;Area code&#x27;, &#x27;Number vmail messages&#x27;, &#x27;Total day minutes&#x27;, &#x27;Total day calls&#x27;, &#x27;Total day charge&#x27;, &#x27;Total eve minutes&#x27;, &#x27;Total eve calls&#x27;, &#x27;Total eve charge&#x27;, &#x27;Total night minutes&#x27;, &#x27;Total night calls&#x27;, &#x27;Total night charge&#x27;, &#x27;Total intl minutes&#x27;, &#x27;Total intl calls&#x27;, &#x27;Total intl charge&#x27;, &#x27;Customer service calls&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>StandardScaler</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>cat</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>[&#x27;State&#x27;, &#x27;International plan&#x27;, &#x27;Voice mail plan&#x27;]</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>OneHotEncoder</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.preprocessing.OneHotEncoder.html\">?<span>Documentation for OneHotEncoder</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>OneHotEncoder(sparse_output=False)</pre></div> </div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(max_depth=10)</pre></div> </div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ],
      "source": [
        "# Train final product-ready model\n",
        "# ‚úçÔ∏è Now create the pipeline again, one last time. Fit it on the entire dataset (X and y variables).\n",
        "pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('classifier', RandomForestClassifier(max_depth=10))\n",
        "])\n",
        "pipeline.fit(X, y)\n",
        "# That's it! You're done! Great job!\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "qdvSiFPuueQf"
      },
      "id": "qdvSiFPuueQf",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.2"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}